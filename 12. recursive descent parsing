12. Write a C program to construct recursive descent parsing for the given grammar
E → TE’ 
E’ → +TE’ / ∈ 
T → FT’ 
T’ → *FT’ / ∈ 
F → ( E ) /  id

#include<stdio.h>
#include<string.h>

char input[100];
int i = 0;

int E();
int EP();
int T();
int TP();
int F();

int main() {
    printf("Recursive descent parsing for the following grammar\n");
    printf("E->TE'\nE'->+TE'/@\nT->FT'\nT'->*FT'/@\nF->(E)/ID\n");
    
    // Predefined test cases
    const char *test_cases[] = {"(a+b)*c", "a/c+d"};
    int num_tests = sizeof(test_cases) / sizeof(test_cases[0]);
    
    for (int j = 0; j < num_tests; j++) {
        strcpy(input, test_cases[j]);
        i = 0;
        printf("\nTesting input: %s\n", input);
        
        if (E() && input[i] == '\0')
            printf("String is accepted\n");
        else
            printf("String is not accepted\n");
    }
    return 0;
}

int E() {
    if (T()) {
        return EP();
    }
    return 0;
}

int EP() {
    if (input[i] == '+') {
        i++;
        if (T()) {
            return EP();
        }
        return 0;
    }
    return 1;
}

int T() {
    if (F()) {
        return TP();
    }
    return 0;
}

int TP() {
    if (input[i] == '*') {
        i++;
        if (F()) {
            return TP();
        }
        return 0;
    }
    return 1;
}

int F() {
    if (input[i] == '(') {
        i++;
        if (E()) {
            if (input[i] == ')') {
                i++;
                return 1;
            }
            return 0;
        }
        return 0;
    } else if ((input[i] >= 'a' && input[i] <= 'z') || (input[i] >= 'A' && input[i] <= 'Z')) {
        i++;
        return 1;
    }
    return 0;
}
