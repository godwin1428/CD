31.Implement Lexical Analyzer using FLEX (Fast Lexical Analyzer).  The program should 
separate the tokens in the given C program and display with appropriate caption.

sample.c

#include<stdio.h>  
void main() 
{ 
int a,b,c = 30;  
printf("hello"); 
}

token.l

%{
    #include <stdio.h>
    int count_id = 0, count_key = 0;
%}

digit  [0-9]
letter [A-Za-z]

%%

"stdio.h"|"conio.h"  { printf("%s is a standard library\n",yytext); }  
"include"|"void"|"main"|"printf"|"int" { printf("%s is a keyword\n",yytext); count_key++; }  
{letter}({letter}|{digit})*  { printf("%s is an identifier\n", yytext); count_id++; }  
{digit}+  { printf("%s is a number\n", yytext); }  
\"(\\.|[^"\\])*\"  { printf("%s is a string literal\n", yytext); }  
.|\n   { /* Ignore other characters */ }  

%%

int yywrap() {
    return 1;
}

int main(int argc, char *argv[]) {
    if(argc != 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
    }

    yyin = fopen(argv[1], "r");
    if (!yyin) {
        printf("Error opening file: %s\n", argv[1]);
        return 1;
    }

    yylex();

    printf("Number of identifiers = %d\n", count_id);
    printf("Number of keywords = %d\n", count_key);

    fclose(yyin);
    return 0;
}

output
flex token.l
gcc lex.yy.c
a.exe
