19.Write a C program to compute LEADING( ) – operator precedence parser for the given 
grammar 
   E → E + T | T 
   T → T * F | F 
   F → ( E ) | id

#include <stdio.h>

// Input is provided directly in the code
char arr[18][3] = {
    {'E', '+', 'F'}, {'E', '*', 'F'}, {'E', '(', 'F'}, {'E', ')', 'F'}, {'E', 'i', 'F'}, {'E', '$', 'F'},
    {'F', '+', 'F'}, {'F', '*', 'F'}, {'F', '(', 'F'}, {'F', ')', 'F'}, {'F', 'i', 'F'}, {'F', '$', 'F'},
    {'T', '+', 'F'}, {'T', '*', 'F'}, {'T', '(', 'F'}, {'T', ')', 'F'}, {'T', 'i', 'F'}, {'T', '$', 'F'}
};

char prod[] = "EETTFF"; // Productions for E, T, F
char res[6][3] = {
    {'E', '+', 'T'}, {'T', '\0'}, {'T', '*', 'F'}, {'F', '\0'}, {'(', 'E', ')'}, {'i', '\0'}
};

char stack[5][2]; // Stack for processing
int top = -1; // Stack top pointer

// Function to install a production and terminal into the array
void install(char pro, char re) {
    for (int i = 0; i < 18; ++i) {
        if (arr[i][0] == pro && arr[i][1] == re) {
            arr[i][2] = 'T'; // Mark as terminal
            break;
        }
    }
    ++top; // Push to stack
    stack[top][0] = pro;
    stack[top][1] = re;
}

int main() {
    // Process productions and terminals
    for (int i = 0; i < 6; ++i) {
        for (int j = 0; j < 3 && res[i][j] != '\0'; ++j) {
            if (res[i][j] == '+' || res[i][j] == '*' || res[i][j] == '(' || res[i][j] == ')' || res[i][j] == 'i' || res[i][j] == '$') {
                install(prod[i], res[i][j]); // Install production and terminal
                break;
            }
        }
    }

    // Process the stack
    while (top >= 0) {
        char pro = stack[top][0]; // Production
        char re = stack[top][1];  // Terminal
        --top; // Pop from stack
        for (int i = 0; i < 6; ++i) {
            if (res[i][0] == pro && res[i][0] != prod[i]) {
                install(prod[i], re); // Install for other productions
            }
        }
    }

    // Print the array
    printf("Array after processing:\n");
    for (int i = 0; i < 18; ++i) {
        for (int j = 0; j < 3; ++j) {
            printf("%c\t", arr[i][j]);
        }
        printf("\n");
    }

    // Print the LEADING() sets
    printf("\nLEADING() sets:\n");
    char pri = ' ';
    for (int i = 0; i < 18; ++i) {
        if (pri != arr[i][0]) {
            pri = arr[i][0];
            printf("\n%c -> ", pri);
        }
        if (arr[i][2] == 'T') {
            printf("%c ", arr[i][1]);
        }
    }
    printf("\n");

    return 0;
}
