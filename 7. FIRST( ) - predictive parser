7. Write a C program to find FIRST( ) - predictive parser for the given grammar
S → AaAb / BbBa
A → ∈
B → ∈

#include<stdio.h>
#include<ctype.h>

void FIRST(char[],char);
void addToResultSet(char[],char);

int numOfProductions = 4;
char productionSet[4][10] = {"S=AaAb", "S=BbBa", "A=$", "B=$"};

int main()
{
    int i;
    char c;
    char result[20];
    char testSymbols[] = {'S', 'A', 'B'};
    int numSymbols = 3;
    
    for(i = 0; i < numSymbols; i++) {
        c = testSymbols[i];
        FIRST(result, c);
        printf("\n FIRST(%c)= { ", c);
        for(int j = 0; result[j] != '\0'; j++)
            printf(" %c ", result[j]);
        printf("}\n");
    }
    return 0;
}

void FIRST(char* Result, char c)
{
    int i, j, k;
    char subResult[20];
    int foundEpsilon;
    subResult[0] = '\0';
    Result[0] = '\0';
    
    if(!isupper(c)) {
        addToResultSet(Result, c);
        return;
    }
    
    for(i = 0; i < numOfProductions; i++) {
        if(productionSet[i][0] == c) {
            if(productionSet[i][2] == '$') 
                addToResultSet(Result, '$');
            else {
                j = 2;
                while(productionSet[i][j] != '\0') {
                    foundEpsilon = 0;
                    FIRST(subResult, productionSet[i][j]);
                    for(k = 0; subResult[k] != '\0'; k++)
                        addToResultSet(Result, subResult[k]);
                    for(k = 0; subResult[k] != '\0'; k++)
                        if(subResult[k] == '$') {
                            foundEpsilon = 1;
                            break;
                        }
                    if(!foundEpsilon)
                        break;
                    j++;
                }
            }
        }
    }
    return;
}

void addToResultSet(char Result[], char val)
{
    int k;
    for(k = 0; Result[k] != '\0'; k++)
        if(Result[k] == val)
            return;
    Result[k] = val;
    Result[k+1] = '\0';
}
