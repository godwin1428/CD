9. Implement a C program to eliminate left recursion from a given CFG.
S → (L) / a
L → L , S / S

#include<stdio.h>
#include<string.h>
#define SIZE 10  

int main() {
    char production[2][SIZE] = {"S->(L)|a", "L->L,S|S"};
    int num = 2;
    char non_terminal, beta, alpha;
    int index = 3;
    
    for(int i = 0; i < num; i++) {
        printf("\nGRAMMAR : %s", production[i]);
        non_terminal = production[i][0];
        
        if (non_terminal == production[i][index]) {
            alpha = production[i][index + 1];
            printf(" is left recursive.\n");
            
            while (production[i][index] != 0 && production[i][index] != '|')
                index++;
            
            if (production[i][index] != 0) {
                beta = production[i][index + 1];
                printf("Grammar without left recursion:\n");
                printf("%c->%c%c'\n", non_terminal, beta, non_terminal);
                printf("%c'->%c%c'|E\n", non_terminal, alpha, non_terminal);
            } else {
                printf(" can't be reduced\n");
            }
        } else {
            printf(" is not left recursive.\n");
        }
        index = 3;
    }
    return 0;
}
