15. Write a C Program to implement the operator precedence parsing.

Enter the string 
i*(i+i)*i 

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

char *input;
int i = 0;
char lasthandle[6], stack[50];
char handles[][5] = {")E(", "E*E", "E+E", "i", "E^E"}; // (E) becomes )E( when pushed to stack

int top = 0, l;
char prec[9][9] = {
    /* Input:    +    -    *    /    ^    i    (    )    $  */
    /* Stack + */ '>', '>', '<', '<', '<', '<', '<', '>', '>',
    /* Stack - */ '>', '>', '<', '<', '<', '<', '<', '>', '>',
    /* Stack * */ '>', '>', '>', '>', '<', '<', '<', '>', '>',
    /* Stack / */ '>', '>', '>', '>', '<', '<', '<', '>', '>',
    /* Stack ^ */ '>', '>', '>', '>', '<', '<', '<', '>', '>',
    /* Stack i */ '>', '>', '>', '>', '>', 'e', 'e', '>', '>',
    /* Stack ( */ '<', '<', '<', '<', '<', '<', '<', '>', 'e',
    /* Stack ) */ '>', '>', '>', '>', '>', 'e', 'e', '>', '>',
    /* Stack $ */ '<', '<', '<', '<', '<', '<', '<', '<', '>',
};

int getindex(char c) {
    switch (c) {
        case '+': return 0;
        case '-': return 1;
        case '*': return 2;
        case '/': return 3;
        case '^': return 4;
        case 'i': return 5;
        case '(': return 6;
        case ')': return 7;
        case '$': return 8;
    }
    return -1; // Invalid character
}

int shift() {
    stack[++top] = *(input + i++);
    stack[top + 1] = '\0';
    return 1;
}

int reduce() {
    int len, found, t;
    for (int j = 0; j < 5; j++) { // Selecting handles
        len = strlen(handles[j]);
        if (stack[top] == handles[j][0] && top + 1 >= len) {
            found = 1;
            for (t = 0; t < len; t++) {
                if (stack[top - t] != handles[j][t]) {
                    found = 0;
                    break;
                }
            }
            if (found == 1) {
                stack[top - t + 1] = 'E';
                top = top - t + 1;
                strcpy(lasthandle, handles[j]);
                stack[top + 1] = '\0';
                return 1; // Successful reduction
            }
        }
    }
    return 0; // No reduction possible
}

void dispstack() {
    for (int j = 0; j <= top; j++)
        printf("%c", stack[j]);
}

void dispinput() {
    for (int j = i; j < l; j++)
        printf("%c", *(input + j));
}

int main() {
    // Input is provided directly in the code
    input = (char *)malloc(50 * sizeof(char));
    strcpy(input, "i*(i+i)*i$"); // Input string with $ appended
    l = strlen(input);
    strcpy(stack, "$");

    printf("\nSTACK\tINPUT\tACTION\n");
    while (i <= l) {
        shift();
        printf("\n");
        dispstack();
        printf("\t");
        dispinput();
        printf("\tShift");

        if (prec[getindex(stack[top])][getindex(input[i])] == '>') {
            while (reduce()) {
                printf("\n");
                dispstack();
                printf("\t");
                dispinput();
                printf("\tReduced: E->%s", lasthandle);
            }
        }
    }

    if (strcmp(stack, "$E$") == 0)
        printf("\nAccepted;\n");
    else
        printf("\nNot Accepted;\n");

    free(input);
    return 0;
}
