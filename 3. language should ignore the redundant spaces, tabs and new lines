3. Design a lexical Analyzer for given language should ignore the redundant spaces, tabs and new lines and ignore comments using C

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>

int isKeyword(char buffer[]){
    char keywords[32][10] = {"main","auto","break","case","char","const","continue","default",
    "do","double","else","enum","extern","float","for","goto",
    "if","int","long","register","return","short","signed",
    "sizeof","static","struct","switch","typedef",
    "unsigned","void","printf","while"};
    int i, flag = 0;
    for(i = 0; i < 32; ++i)
    {
        if(strcmp(keywords[i], buffer) == 0)
        {
            flag = 1;
            break;
        }
    }
    return flag;
}

int main()
{
    char ch, buffer[15], operators[] = "+-*/%=";
    char input[] = "int main() { int a = 10; float b = 20.5; a = a + b; }";
    int i, j = 0, len = strlen(input);

    for(i = 0; i < len; i++){
        ch = input[i];
        
        if(ch == '/' && input[i+1] == '/') {
            while(i < len && input[i] != '\n') i++;
            continue;
        }
        if(ch == '/' && input[i+1] == '*') {
            i += 2;
            while(i < len-1 && !(input[i] == '*' && input[i+1] == '/')) i++;
            i++;
            continue;
        }
        
        if(strchr(operators, ch)) {
            printf("%c is operator\n", ch);
        }
        else if(isalnum(ch)) {
            buffer[j++] = ch;
        }
        else if((ch == ' ' || ch == '\n' || ch == '\t') && j != 0) {
            buffer[j] = '\0';
            j = 0;
            if(isKeyword(buffer))
                printf("%s is keyword\n", buffer);
            else
                printf("%s is identifier\n", buffer);
        }
    }
    return 0;
}
